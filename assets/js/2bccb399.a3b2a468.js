"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[325],{3919:function(e,t,n){function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return r}})},4996:function(e,t,n){n.d(t,{C:function(){return o},Z:function(){return i}});var a=n(2263),r=n(3919);function o(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,i=o.forcePrependBaseUrl,s=void 0!==i&&i,u=o.absolute,c=void 0!==u&&u;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(s)return t+n;var l=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+l:l}(o,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},9851:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(4996),s=["components"],u={id:"debugging",title:"Debugging",sidebar_label:"Debugging"},c=void 0,l={unversionedId:"debugging",id:"debugging",isDocsHomePage:!1,title:"Debugging",description:"React Tracked uses native React state and context,",source:"@site/docs/debugging.md",sourceDirName:".",slug:"/debugging",permalink:"/docs/debugging",tags:[],version:"current",frontMatter:{id:"debugging",title:"Debugging",sidebar_label:"Debugging"},sidebar:"docs",previous:{title:"Recipes",permalink:"/docs/recipes"},next:{title:"Caveats",permalink:"/docs/caveats"}},d=[{value:"React DevTools",id:"react-devtools",children:[],level:2},{value:"useTrackedState (AffectedDebugValue)",id:"usetrackedstate-affecteddebugvalue",children:[],level:2},{value:"useSelector",id:"useselector",children:[],level:2},{value:"Naive logging",id:"naive-logging",children:[],level:2}],g={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"React Tracked uses native React state and context,\nand the debugging method is basically the same as pure React."),(0,o.kt)("h2",{id:"react-devtools"},"React DevTools"),(0,o.kt)("p",null,"React officially provides its DevTools\n",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2019/08/15/new-react-devtools.html"},"[1]"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/tree/master/packages/react-devtools"},"[2]"),"."),(0,o.kt)("p",null,"Basically, you can use the tool just like a pure React app.\nOne note with React Tracked is that a state object stays\nin the Provider component."),(0,o.kt)("p",null,"For example, if you create a container like this,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const useValue = () => useReducer(reducer, initialState);\nexport const { Provider, useTracked } = createContainer(useValue);\n")),(0,o.kt)("p",null,"your state will be in Provider / Value / Reducer."),(0,o.kt)("img",{alt:"screenshot 1",src:(0,i.Z)("img/devtools_screen1.png")}),(0,o.kt)("h2",{id:"usetrackedstate-affecteddebugvalue"},"useTrackedState (AffectedDebugValue)"),(0,o.kt)("p",null,"The very specific usage of the DevTools is for ",(0,o.kt)("inlineCode",{parentName:"p"},"useTrackedState"),".\nIn the development mode, the tracked path list of a state\ncan be investigated with ",(0,o.kt)("inlineCode",{parentName:"p"},"AffectedDebugValue"),"."),(0,o.kt)("p",null,"Find it under TrackedState / TrackedState / AffectedDebugValue / DebugValue."),(0,o.kt)("img",{alt:"screenshot 2",src:(0,i.Z)("img/devtools_screen2.png")}),(0,o.kt)("h2",{id:"useselector"},"useSelector"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelector"),", you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"useDebugValue")," on your end.\nFor example, the following is to show a selected value in the DevTools."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const selectPerson = state => state.person;\nconst Person = () => {\n  const person = useSelector(selectPerson);\n  useDebugValue(person);\n  ...\n};\n")),(0,o.kt)("h2",{id:"naive-logging"},"Naive logging"),(0,o.kt)("p",null,"If you prefer console.log style debugging,\nhere's a recipe for that."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const reducer = ...;\nconst initialState = ...;\n\nconst useValue = () => {\n  const [state, dispatch] = useReducer(reducer, null, init);\n  useEffect(() => {\n    console.log('state', state);\n  }, [state]);\n  const dispatchWithLogging = useCallback((action) => {\n    console.log('action', action);\n    dispatch(action);\n  }, []);\n  return [state, dispatchWithLogging];\n};\n\nconst {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(useValue);\n\nconst App = () => (\n  <Provider>\n    ...\n  </Provider>\n);\n")))}p.isMDXComponent=!0}}]);