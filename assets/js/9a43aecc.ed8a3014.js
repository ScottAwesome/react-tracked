"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[336],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return m}});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=o.createContext({}),d=function(t){var e=o.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},l=function(t){var e=d(t.components);return o.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),u=d(n),m=a,y=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(y,s(s({ref:e},l),{},{components:n})):o.createElement(y,s({ref:e},l))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:a,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(t,e,n){var o=n(7294);e.Z=function(t){var e=t.children,n=t.hidden,a=t.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},e)}},5064:function(t,e,n){n.d(e,{Z:function(){return p}});var o=n(7294),a=n(9443);var r=function(){var t=(0,o.useContext)(a.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t},s=n(6010),i="tabItem_1uMI",c="tabItemActive_2DSg";var d=37,l=39;var p=function(t){var e=t.lazy,n=t.block,a=t.defaultValue,p=t.values,u=t.groupId,m=t.className,y=r(),T=y.tabGroupChoices,h=y.setTabGroupChoices,f=(0,o.useState)(a),g=f[0],v=f[1],k=o.Children.toArray(t.children),E=[];if(null!=u){var D=T[u];null!=D&&D!==g&&p.some((function(t){return t.value===D}))&&v(D)}var b=function(t){var e=t.currentTarget,n=E.indexOf(e),o=p[n].value;v(o),null!=u&&(h(u,o),setTimeout((function(){var t,n,o,a,r,s,i,d;(t=e.getBoundingClientRect(),n=t.top,o=t.left,a=t.bottom,r=t.right,s=window,i=s.innerHeight,d=s.innerWidth,n>=0&&r<=d&&a<=i&&o>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(c),setTimeout((function(){return e.classList.remove(c)}),2e3))}),150))},O=function(t){var e,n;switch(t.keyCode){case l:var o=E.indexOf(t.target)+1;n=E[o]||E[0];break;case d:var a=E.indexOf(t.target)-1;n=E[a]||E[E.length-1]}null==(e=n)||e.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},m)},p.map((function(t){var e=t.value,n=t.label;return o.createElement("li",{role:"tab",tabIndex:g===e?0:-1,"aria-selected":g===e,className:(0,s.Z)("tabs__item",i,{"tabs__item--active":g===e}),key:e,ref:function(t){return E.push(t)},onKeyDown:O,onFocus:b,onClick:b},n)}))),e?(0,o.cloneElement)(k.filter((function(t){return t.props.value===g}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},k.map((function(t,e){return(0,o.cloneElement)(t,{key:e,hidden:t.props.value!==g})}))))}},9443:function(t,e,n){var o=(0,n(7294).createContext)(void 0);e.Z=o},9506:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return y}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),s=n(5064),i=n(8215),c=["components"],d={id:"tutorial-04",title:"Tutorial with createContainer - ToDo App with Async Actions",sidebar_label:"ToDo App (async)"},l=void 0,p={unversionedId:"tutorial-04",id:"tutorial-04",isDocsHomePage:!1,title:"Tutorial with createContainer - ToDo App with Async Actions",description:"This tutorial shows example code with async actions.",source:"@site/docs/tutorial-04.md",sourceDirName:".",slug:"/tutorial-04",permalink:"/docs/tutorial-04",version:"current",frontMatter:{id:"tutorial-04",title:"Tutorial with createContainer - ToDo App with Async Actions",sidebar_label:"ToDo App (async)"},sidebar:"docs",previous:{title:"ToDo App (useState+Immer)",permalink:"/docs/tutorial-03"},next:{title:"Person Name (redux)",permalink:"/docs/tutorial-redux-01"}},u=[{value:"src/App.js",id:"srcappjs",children:[]},{value:"src/store.js",id:"srcstorejs",children:[]},{value:"src/TodoList.js",id:"srctodolistjs",children:[]},{value:"src/TodoItem.js",id:"srctodoitemjs",children:[]},{value:"src/NewTodo.js",id:"srcnewtodojs",children:[]},{value:"CodeSandbox",id:"codesandbox",children:[]}],m={toc:u};function y(t){var e=t.components,n=(0,a.Z)(t,c);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This tutorial shows example code with async actions."),(0,r.kt)("h2",{id:"srcappjs"},"src/App.js"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { Provider } from './store';\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <Provider>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { Provider } from './store';\nimport TodoList from './TodoList';\n\nconst App: React.FC = () => (\n  <Provider>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n\n")))),(0,r.kt)("p",null,"This is the root component.\nIt wraps TodoList with Provider."),(0,r.kt)("h2",{id:"srcstorejs"},"src/store.js"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useReducerAsync } from 'use-reducer-async';\nimport { createContainer } from 'react-tracked';\n\nconst initialState = {\n  todoIds: [],\n  todoMap: {},\n  query: '',\n  pending: false,\n  error: null,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'STARTED':\n      return {\n        ...state,\n        pending: true,\n      };\n    case 'TODO_CREATED':\n      return {\n        ...state,\n        todoIds: [...state.todoIds, action.todo.id],\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_UPDATED':\n      return {\n        ...state,\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_DELETED': {\n      const { [action.id]: _removed, ...rest } = state.todoMap;\n      return {\n        ...state,\n        todoIds: state.todoIds.filter((id) => id !== action.id),\n        todoMap: rest,\n        pending: false,\n      };\n    }\n    case 'FAILED':\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case 'QUERY_CHANGED':\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      throw new Error('unknown action type');\n  }\n};\n\nconst asyncActionHandlers = {\n  CREATE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const response = await fetch(`https://reqres.in/api/todos?delay=1`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ title: action.title }),\n        });\n        const data = await response.json();\n        if (typeof data.id !== 'string') throw new Error('no id');\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_CREATED', todo: data });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  TOGGLE_TODO:\n    ({ dispatch, getState }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const todo = getState().todoMap[action.id];\n        const body = {\n          ...todo,\n          completed: !todo.completed,\n        };\n        const response = await fetch(\n          `https://reqres.in/api/todos/${action.id}?delay=1`,\n          {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n          },\n        );\n        const data = await response.json();\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_UPDATED', todo: { ...data, id: action.id } });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  DELETE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        await fetch(`https://reqres.in/api/todos/${action.id}?delay=1`, {\n          method: 'DELETE',\n        });\n        dispatch({ type: 'TODO_DELETED', id: action.id });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n};\n\nconst useValue = () =>\n  useReducerAsync(reducer, initialState, asyncActionHandlers);\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch,\n} = createContainer(useValue);\n\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Reducer } from 'react';\nimport { useReducerAsync, AsyncActionHandlers } from 'use-reducer-async';\nimport { createContainer } from 'react-tracked';\n\ntype TodoType = {\n  id: string;\n  title: string;\n  completed?: boolean;\n};\n\ntype State = {\n  todoIds: string[];\n  todoMap: { [id: string]: TodoType };\n  query: string;\n  pending: boolean;\n  error: Error | null;\n};\n\nconst initialState: State = {\n  todoIds: [],\n  todoMap: {},\n  query: '',\n  pending: false,\n  error: null,\n};\n\ntype Action =\n  | { type: 'STARTED' }\n  | { type: 'TODO_CREATED'; todo: TodoType }\n  | { type: 'TODO_UPDATED'; todo: TodoType }\n  | { type: 'TODO_DELETED'; id: string }\n  | { type: 'FAILED'; error: Error }\n  | { type: 'QUERY_CHANGED'; query: string };\n\nconst reducer: Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case 'STARTED':\n      return {\n        ...state,\n        pending: true,\n      };\n    case 'TODO_CREATED':\n      return {\n        ...state,\n        todoIds: [...state.todoIds, action.todo.id],\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_UPDATED':\n      return {\n        ...state,\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_DELETED': {\n      const { [action.id]: _removed, ...rest } = state.todoMap;\n      return {\n        ...state,\n        todoIds: state.todoIds.filter((id) => id !== action.id),\n        todoMap: rest,\n        pending: false,\n      };\n    }\n    case 'FAILED':\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case 'QUERY_CHANGED':\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      throw new Error('unknown action type');\n  }\n};\n\ntype AsyncActionCreate = { type: 'CREATE_TODO'; title: string };\ntype AsyncActionToggle = { type: 'TOGGLE_TODO'; id: string };\ntype AsyncActionDelete = { type: 'DELETE_TODO'; id: string };\n\ntype AsyncAction = AsyncActionCreate | AsyncActionDelete | AsyncActionToggle;\n\nconst asyncActionHandlers: AsyncActionHandlers<\n  Reducer<State, Action>,\n  AsyncAction\n> = {\n  CREATE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const response = await fetch(`https://reqres.in/api/todos?delay=1`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ title: action.title }),\n        });\n        const data = await response.json();\n        if (typeof data.id !== 'string') throw new Error('no id');\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_CREATED', todo: data });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  TOGGLE_TODO:\n    ({ dispatch, getState }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const todo = getState().todoMap[action.id];\n        const body = {\n          ...todo,\n          completed: !todo.completed,\n        };\n        const response = await fetch(\n          `https://reqres.in/api/todos/${action.id}?delay=1`,\n          {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n          },\n        );\n        const data = await response.json();\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_UPDATED', todo: { ...data, id: action.id } });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  DELETE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        await fetch(`https://reqres.in/api/todos/${action.id}?delay=1`, {\n          method: 'DELETE',\n        });\n        dispatch({ type: 'TODO_DELETED', id: action.id });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n};\n\nconst useValue = () =>\n  useReducerAsync<Reducer<State, Action>, AsyncAction>(\n    reducer,\n    initialState,\n    asyncActionHandlers,\n  );\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch,\n} = createContainer(useValue);\n\n")))),(0,r.kt)("p",null,"This is the store we use.\nIt is a bit long and you would eventually want to split into files.\nIt defines a reducer for normal (sync) actions.\nThen, we combine it with async actioin handlers\nto create a store."),(0,r.kt)("p",null,"In this example we use ",(0,r.kt)("inlineCode",{parentName:"p"},"use-reducer-async")," helper hook.\nIt's a tiny custom hook, and actually it's fairly easy\nto do the same thing without the custom hook."),(0,r.kt)("p",null,"You could also use ",(0,r.kt)("inlineCode",{parentName:"p"},"redux-saga")," for async actions.\nFor saga users, here is ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/github/dai-shi/react-tracked/tree/main/examples/13_saga"},"an example"),"."),(0,r.kt)("p",null,"Another note in this store is that it has both ",(0,r.kt)("inlineCode",{parentName:"p"},"todoIds")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"todoMap"),".\nThey are denormalized. The reason for this pattern is\nit would allow state usage tracking easier.\nIn other words, we might not need ",(0,r.kt)("inlineCode",{parentName:"p"},"React.memo")," in a certain case.\nIf you want the data in the store to be normalized,\nplease check out the array pattern in ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial-01"},"the other Tutorial"),"."),(0,r.kt)("h2",{id:"srctodolistjs"},"src/TodoList.js"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\nimport TodoItem from './TodoItem';\nimport NewTodo from './NewTodo';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setQuery = (event) => {\n    dispatch({ type: 'QUERY_CHANGED', query: event.target.value });\n  };\n  return (\n    <div>\n      {state.error && <h1>{state.error.message}</h1>}\n      <ul>\n        {state.todoIds.map((id) => (\n          <TodoItem key={id} id={id} />\n        ))}\n        <NewTodo />\n      </ul>\n      <div>\n        Highlight Query for incomplete items:\n        <input value={state.query} onChange={setQuery} />\n      </div>\n      {state.pending && <h3>Processing...</h3>}\n    </div>\n  );\n};\n\nexport default TodoList;\n\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\nimport TodoItem from './TodoItem';\nimport NewTodo from './NewTodo';\n\nconst TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'QUERY_CHANGED', query: event.target.value });\n  };\n  return (\n    <div>\n      {state.error && <h1>{state.error.message}</h1>}\n      <ul>\n        {state.todoIds.map((id) => (\n          <TodoItem key={id} id={id} />\n        ))}\n        <NewTodo />\n      </ul>\n      <div>\n        Highlight Query for incomplete items:\n        <input value={state.query} onChange={setQuery} />\n      </div>\n      {state.pending && <h3>Processing...</h3>}\n    </div>\n  );\n};\n\nexport default TodoList;\n\n")))),(0,r.kt)("p",null,"This component is to show the list of ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem"),"s,\n",(0,r.kt)("inlineCode",{parentName:"p"},"NewTodo")," to create a new item, and\na text field for highlight query.\nIt will also show error and pending states."),(0,r.kt)("p",null,"Notice it only passes ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem"),"."),(0,r.kt)("h2",{id:"srctodoitemjs"},"src/TodoItem.js"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\n\nconst renderHighlight = (title, query) => {\n  if (!query) return title;\n  const index = title.indexOf(query);\n  if (index === -1) return title;\n  return (\n    <>\n      {title.slice(0, index)}\n      <b>{query}</b>\n      {title.slice(index + query.length)}\n    </>\n  );\n};\n\nconst TodoItem = ({ id }) => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const todo = state.todoMap[id];\n  const delTodo = () => {\n    dispatch({ type: 'DELETE_TODO', id: todo.id });\n  };\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={!!todo.completed}\n        onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n      />\n      <span\n        style={{\n          textDecoration: todo.completed ? 'line-through' : 'none',\n        }}\n      >\n        {todo.completed ? todo.title : renderHighlight(todo.title, state.query)}\n      </span>\n      <button onClick={delTodo}>Delete</button>\n    </li>\n  );\n};\n\nexport default React.memo(TodoItem);\n\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\n\nconst renderHighlight = (title: string, query: string) => {\n  if (!query) return title;\n  const index = title.indexOf(query);\n  if (index === -1) return title;\n  return (\n    <>\n      {title.slice(0, index)}\n      <b>{query}</b>\n      {title.slice(index + query.length)}\n    </>\n  );\n};\n\ntype Props = {\n  id: string;\n};\n\nconst TodoItem: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const todo = state.todoMap[id];\n  const delTodo = () => {\n    dispatch({ type: 'DELETE_TODO', id: todo.id });\n  };\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={!!todo.completed}\n        onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n      />\n      <span\n        style={{\n          textDecoration: todo.completed ? 'line-through' : 'none',\n        }}\n      >\n        {todo.completed ? todo.title : renderHighlight(todo.title, state.query)}\n      </span>\n      <button onClick={delTodo}>Delete</button>\n    </li>\n  );\n};\n\nexport default React.memo(TodoItem);\n\n")))),(0,r.kt)("p",null,"This is the TodoItem component.\nIt dispathes async actions,\nbut it doesn't need to know if an action is sync or async."),(0,r.kt)("h2",{id:"srcnewtodojs"},"src/NewTodo.js"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\n\nimport { useDispatch } from './store';\n\nconst NewTodo = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const addTodo = () => {\n    dispatch({ type: 'CREATE_TODO', title: text });\n    setText('');\n  };\n  return (\n    <li>\n      <input\n        value={text}\n        placeholder=\"Enter title...\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add</button>\n    </li>\n  );\n};\n\nexport default React.memo(NewTodo);\n\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React, { useState } from 'react';\n\nimport { useDispatch } from './store';\n\nconst NewTodo: React.FC = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const addTodo = () => {\n    dispatch({ type: 'CREATE_TODO', title: text });\n    setText('');\n  };\n  return (\n    <li>\n      <input\n        value={text}\n        placeholder=\"Enter title...\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add</button>\n    </li>\n  );\n};\n\nexport default React.memo(NewTodo);\n\n")))),(0,r.kt)("p",null,"This is the NewTodo component to create a new item.\nIt uses a local state for the text field."),(0,r.kt)("h2",{id:"codesandbox"},"CodeSandbox"),(0,r.kt)("p",null,"You can try ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/festive-wiles-es8ss"},"working example"),"."))}y.isMDXComponent=!0},6010:function(t,e,n){function o(t){var e,n,a="";if("string"==typeof t||"number"==typeof t)a+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=o(t[e]))&&(a&&(a+=" "),a+=n);else for(e in t)t[e]&&(a&&(a+=" "),a+=e);return a}function a(){for(var t,e,n=0,a="";n<arguments.length;)(t=arguments[n++])&&(e=o(t))&&(a&&(a+=" "),a+=e);return a}n.d(e,{Z:function(){return a}})}}]);