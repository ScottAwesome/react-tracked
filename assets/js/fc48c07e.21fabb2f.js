"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[259],{8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(7462),r=n(7294),s=n(2389),i=n(9443);var o=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(9521),c=n(6010),u="tabItem_1uMI";function m(e){var t,n,a,s=e.lazy,i=e.block,m=e.defaultValue,d=e.values,p=e.groupId,N=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:v.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),h=(0,l.lx)(f,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=v[0])?void 0:a.props.value;if(null!==y&&!f.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=o(),k=S.tabGroupChoices,b=S.setTabGroupChoices,T=(0,r.useState)(y),g=T[0],F=T[1],w=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var P=k[p];null!=P&&P!==g&&f.some((function(e){return e.value===P}))&&F(P)}var C=function(e){var t=e.currentTarget,n=w.indexOf(t),a=f[n].value;a!==g&&(x(t),F(a),null!=p&&b(p,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;n=w[a]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.currentTarget)-1;n=w[r]||w[w.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},N)},f.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:(0,c.Z)("tabs__item",u,{"tabs__item--active":g===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:E,onFocus:C,onClick:C},null!=n?n:t)}))),s?(0,r.cloneElement)(v.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}function d(e){var t=(0,s.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},9812:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return d},default:function(){return N}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=n(6396),o=n(8215),l=["components"],c={id:"tutorial-redux-01",title:"Tutorial with react-redux - Person Name",sidebar_label:"Person Name (redux)"},u=void 0,m={unversionedId:"tutorial-redux-01",id:"tutorial-redux-01",isDocsHomePage:!1,title:"Tutorial with react-redux - Person Name",description:"This tutorial shows tiny example code with react-redux.",source:"@site/docs/tutorial-redux-01.md",sourceDirName:".",slug:"/tutorial-redux-01",permalink:"/docs/tutorial-redux-01",tags:[],version:"current",frontMatter:{id:"tutorial-redux-01",title:"Tutorial with react-redux - Person Name",sidebar_label:"Person Name (redux)"},sidebar:"docs",previous:{title:"ToDo App (async)",permalink:"/docs/tutorial-04"},next:{title:"Person Name (zustand)",permalink:"/docs/tutorial-zustand-01"}},d=[{value:"With useSelector",id:"with-useselector",children:[],level:2},{value:"With useTrackedSelector",id:"with-usetrackedselector",children:[],level:2}],p={toc:d};function N(e){var t=e.components,n=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This tutorial shows tiny example code with react-redux.\nThere are two variants.\nThe first one is with useSelector.\nThe second one is with useTrackedSelector."),(0,s.kt)("h2",{id:"with-useselector"},"With useSelector"),(0,s.kt)(i.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,s.kt)(o.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as React from 'react';\nimport { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\nconst initialState = {\n  firstName: 'React',\n  lastName: 'Tracked',\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'setFirstName':\n      return { ...state, firstName: action.firstName };\n    case 'setLastName':\n      return { ...state, lastName: action.lastName };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst EditPerson = () => {\n  const dispatch = useDispatch();\n  const firstName = useSelector((state) => state.firstName);\n  const lastName = useSelector((state) => state.lastName);\n  const setFirstName = (e) => {\n    const firstName = e.target.value;\n    dispatch({ type: 'setFirstName', firstName });\n  };\n  const setLastName = (e) => {\n    const lastName = e.target.value;\n    dispatch({ type: 'setLastName', lastName });\n  };\n  return (\n    <div>\n      <div>\n        First Name:\n        <input value={firstName} onChange={setFirstName} />\n      </div>\n      <div>\n        Last Name:\n        <input value={lastName} onChange={setLastName} />\n      </div>\n    </div>\n  );\n};\n\nconst ShowPerson = () => {\n  const [onlyFirstName, setOnlyFirstName] = useState(false);\n  const firstName = useSelector((state) => state.firstName);\n  const lastName = useSelector((state) =>\n    onlyFirstName ? null : state.lastName,\n  );\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setOnlyFirstName((s) => !s)}>\n        {onlyFirstName ? 'Showing only first name' : 'Showing full name'}\n      </button>\n      {onlyFirstName ? (\n        <div>First Name: {firstName}</div>\n      ) : (\n        <div>\n          Full Name: {firstName} {lastName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <EditPerson />\n      <ShowPerson />\n    </Provider>\n  );\n};\n\nexport default App;\n\n"))),(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as React from 'react';\nimport { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\nconst initialState = {\n  firstName: 'React',\n  lastName: 'Tracked',\n};\n\ntype State = typeof initialState;\n\ntype Action =\n  | { type: 'setFirstName'; firstName: string }\n  | { type: 'setLastName'; lastName: string };\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'setFirstName':\n      return { ...state, firstName: action.firstName };\n    case 'setLastName':\n      return { ...state, lastName: action.lastName };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst EditPerson: React.FC = () => {\n  const dispatch = useDispatch();\n  const firstName = useSelector((state: State) => state.firstName);\n  const lastName = useSelector((state: State) => state.lastName);\n  const setFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const firstName = e.target.value;\n    dispatch({ type: 'setFirstName', firstName });\n  };\n  const setLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const lastName = e.target.value;\n    dispatch({ type: 'setLastName', lastName });\n  };\n  return (\n    <div>\n      <div>\n        First Name:\n        <input value={firstName} onChange={setFirstName} />\n      </div>\n      <div>\n        Last Name:\n        <input value={lastName} onChange={setLastName} />\n      </div>\n    </div>\n  );\n};\n\nconst ShowPerson: React.FC = () => {\n  const [onlyFirstName, setOnlyFirstName] = useState(false);\n  const firstName = useSelector((state: State) => state.firstName);\n  const lastName = useSelector((state: State) =>\n    onlyFirstName ? null : state.lastName,\n  );\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setOnlyFirstName((s) => !s)}>\n        {onlyFirstName ? 'Showing only first name' : 'Showing full name'}\n      </button>\n      {onlyFirstName ? (\n        <div>First Name: {firstName}</div>\n      ) : (\n        <div>\n          Full Name: {firstName} {lastName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <EditPerson />\n      <ShowPerson />\n    </Provider>\n  );\n};\n\nexport default App;\n\n")))),(0,s.kt)("p",null,"It's a bit tricky to make a selector conditional."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/react-typescript-forked-r9kw1"},"CodeSandbox")),(0,s.kt)("h2",{id:"with-usetrackedselector"},"With useTrackedSelector"),(0,s.kt)(i.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,s.kt)(o.Z,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as React from 'react';\nimport { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { createTrackedSelector } from 'react-tracked';\n\nconst initialState = {\n  firstName: 'React',\n  lastName: 'Tracked',\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'setFirstName':\n      return { ...state, firstName: action.firstName };\n    case 'setLastName':\n      return { ...state, lastName: action.lastName };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst useTrackedSelector = createTrackedSelector(useSelector);\n\nconst EditPerson = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedSelector();\n  const setFirstName = (e) => {\n    const firstName = e.target.value;\n    dispatch({ type: 'setFirstName', firstName });\n  };\n  const setLastName = (e) => {\n    const lastName = e.target.value;\n    dispatch({ type: 'setLastName', lastName });\n  };\n  return (\n    <div>\n      <div>\n        First Name:\n        <input value={state.firstName} onChange={setFirstName} />\n      </div>\n      <div>\n        Last Name:\n        <input value={state.lastName} onChange={setLastName} />\n      </div>\n    </div>\n  );\n};\n\nconst ShowPerson = () => {\n  const state = useTrackedSelector();\n  const [onlyFirstName, setOnlyFirstName] = useState(false);\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setOnlyFirstName((s) => !s)}>\n        {onlyFirstName ? 'Showing only first name' : 'Showing full name'}\n      </button>\n      {onlyFirstName ? (\n        <div>First Name: {state.firstName}</div>\n      ) : (\n        <div>\n          Full Name: {state.firstName} {state.lastName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <EditPerson />\n      <ShowPerson />\n    </Provider>\n  );\n};\n\nexport default App;\n\n"))),(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as React from 'react';\nimport { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { createTrackedSelector } from 'react-tracked';\n\nconst initialState = {\n  firstName: 'React',\n  lastName: 'Tracked',\n};\n\ntype State = typeof initialState;\n\ntype Action =\n  | { type: 'setFirstName'; firstName: string }\n  | { type: 'setLastName'; lastName: string };\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'setFirstName':\n      return { ...state, firstName: action.firstName };\n    case 'setLastName':\n      return { ...state, lastName: action.lastName };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst useTrackedSelector = createTrackedSelector<State>(useSelector);\n\nconst EditPerson: React.FC = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedSelector();\n  const setFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const firstName = e.target.value;\n    dispatch({ type: 'setFirstName', firstName });\n  };\n  const setLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const lastName = e.target.value;\n    dispatch({ type: 'setLastName', lastName });\n  };\n  return (\n    <div>\n      <div>\n        First Name:\n        <input value={state.firstName} onChange={setFirstName} />\n      </div>\n      <div>\n        Last Name:\n        <input value={state.lastName} onChange={setLastName} />\n      </div>\n    </div>\n  );\n};\n\nconst ShowPerson: React.FC = () => {\n  const state = useTrackedSelector();\n  const [onlyFirstName, setOnlyFirstName] = useState(false);\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setOnlyFirstName((s) => !s)}>\n        {onlyFirstName ? 'Showing only first name' : 'Showing full name'}\n      </button>\n      {onlyFirstName ? (\n        <div>First Name: {state.firstName}</div>\n      ) : (\n        <div>\n          Full Name: {state.firstName} {state.lastName}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <EditPerson />\n      <ShowPerson />\n    </Provider>\n  );\n};\n\nexport default App;\n\n")))),(0,s.kt)("p",null,"This works just the same without the tricky selector."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/react-typescript-forked-n2olx"},"CodeSandbox")))}N.isMDXComponent=!0}}]);